{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\nimport { withAccelerate } from '@prisma/extension-accelerate'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: ReturnType<typeof createPrismaClient> | undefined\r\n}\r\n\r\nfunction createPrismaClient() {\r\n  return new PrismaClient({\r\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\r\n  }).$extends(withAccelerate())\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? createPrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;;;;;;AAGA,MAAM,kBAAkB;AAIxB,SAAS;IACP,OAAO,IAAI,uDAAA,CAAA,eAAY,CAAC;QACtB,KAAK,uCAAyC;YAAC;YAAS;YAAS;SAAO;IAC1E,GAAG,QAAQ,CAAC,CAAA,GAAA,wEAAA,CAAA,iBAAc,AAAD;AAC3B;AAEO,MAAM,SAAS,gBAAgB,MAAM,IAAI;AAEhD,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/auth.ts"],"sourcesContent":["import NextAuth, { type NextAuthConfig } from 'next-auth'\r\nimport CredentialsProvider from 'next-auth/providers/credentials'\r\nimport { PrismaAdapter } from '@auth/prisma-adapter'\r\nimport { prisma } from './prisma'\r\nimport bcrypt from 'bcryptjs'\r\n\r\nexport const authOptions: NextAuthConfig = {\r\n  adapter: PrismaAdapter(prisma) as any,\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: 'credentials',\r\n      credentials: {\r\n        email: { label: 'Email', type: 'email' },\r\n        password: { label: 'Password', type: 'password' }\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null\r\n        }\r\n\r\n        const user = await prisma.user.findUnique({\r\n          where: {\r\n            email: credentials.email\r\n          }\r\n        })\r\n\r\n        if (!user) {\r\n          return null\r\n        }\r\n\r\n        const isPasswordValid = await bcrypt.compare(\r\n          credentials.password as string,\r\n          user.password\r\n        )\r\n\r\n        if (!isPasswordValid) {\r\n          return null\r\n        }\r\n\r\n        return {\r\n          id: user.id,\r\n          email: user.email,\r\n          name: user.name,\r\n        }\r\n      }\r\n    })\r\n  ],\r\n  session: {\r\n    strategy: 'jwt'\r\n  },\r\n  pages: {\r\n    signIn: '/login'\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        return {\r\n          ...token,\r\n          id: user.id\r\n        }\r\n      }\r\n      return token\r\n    },\r\n    async session({ session, token }) {\r\n      return {\r\n        ...session,\r\n        user: {\r\n          ...session.user,\r\n          id: token.id as string\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const { handlers, auth, signIn, signOut } = NextAuth(authOptions)\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAMO,MAAM,cAA8B;IACzC,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,+GAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,4JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,MAAM;oBACT,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,KAAK,EAAE;gBACb;YACF;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,MAAM,EAAE;gBACd;YACF;QACF;IACF;AACF;AAEO,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/auth/[...nextauth]/route.ts"],"sourcesContent":["import { handlers } from '@/lib/auth'\r\n\r\nexport const { GET, POST } = handlers\r\n"],"names":[],"mappings":";;;;;;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,6GAAA,CAAA,WAAQ"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}