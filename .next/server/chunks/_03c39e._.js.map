{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient, Prisma } from '@prisma/client'\r\nimport { withAccelerate } from '@prisma/extension-accelerate'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: ReturnType<typeof createPrismaClient> | undefined\r\n}\r\n\r\nfunction createPrismaClient() {\r\n  // Determine log levels based on environment variables\r\n  let devLogs: Prisma.LogLevel[] = ['error']; // Default fallback\r\n  \r\n  if (process.env.NODE_ENV === 'development') {\r\n    if (process.env.PRISMA_LOG_LEVEL === 'verbose') {\r\n      devLogs = ['query', 'warn', 'error'];\r\n      console.log('üîç Prisma logging: VERBOSE mode (queries + warnings + errors)');\r\n    } else {\r\n      // 'basic' or any other value = no queries, just warnings and errors\r\n      devLogs = ['warn', 'error'];\r\n      console.log('üéØ Prisma logging: BASIC mode (warnings + errors only)');\r\n    }\r\n  } else {\r\n    console.log('üõ°Ô∏è Prisma logging: PRODUCTION mode (errors only)');\r\n  }\r\n\r\n  return new PrismaClient({\r\n    log: devLogs,\r\n  }).$extends(withAccelerate())\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? createPrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;;;;;;AAGA,MAAM,kBAAkB;AAIxB,SAAS;IACP,sDAAsD;IACtD,IAAI,UAA6B;QAAC;KAAQ,EAAE,mBAAmB;IAE/D,wCAA4C;QAC1C,IAAI,QAAQ,GAAG,CAAC,gBAAgB,KAAK,WAAW;YAC9C,UAAU;gBAAC;gBAAS;gBAAQ;aAAQ;YACpC,QAAQ,GAAG,CAAC;QACd,OAAO;YACL,oEAAoE;YACpE,UAAU;gBAAC;gBAAQ;aAAQ;YAC3B,QAAQ,GAAG,CAAC;QACd;IACF;;;IAIA,OAAO,IAAI,uDAAA,CAAA,eAAY,CAAC;QACtB,KAAK;IACP,GAAG,QAAQ,CAAC,CAAA,GAAA,wEAAA,CAAA,iBAAc,AAAD;AAC3B;AAEO,MAAM,SAAS,gBAAgB,MAAM,IAAI;AAEhD,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport bcrypt from 'bcryptjs'\r\nimport { prisma } from '@/lib/prisma'\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { name, email, password } = await request.json()\r\n\r\n    // Validate input\r\n    if (!name || !email || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Missing required fields' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    if (password.length < 6) {\r\n      return NextResponse.json(\r\n        { error: 'Password must be at least 6 characters' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Check if user already exists\r\n    const existingUser = await prisma.user.findUnique({\r\n      where: { email }\r\n    })\r\n\r\n    if (existingUser) {\r\n      return NextResponse.json(\r\n        { error: 'User already exists' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Hash password\r\n    const hashedPassword = await bcrypt.hash(password, 12)\r\n\r\n    // Create user\r\n    const user = await prisma.user.create({\r\n      data: {\r\n        name,\r\n        email,\r\n        password: hashedPassword\r\n      }\r\n    })\r\n\r\n    // Remove password from response\r\n    const { password: _, ...userWithoutPassword } = user\r\n\r\n    return NextResponse.json(\r\n      { user: userWithoutPassword, message: 'User created successfully' },\r\n      { status: 201 }\r\n    )\r\n  } catch (error) {\r\n    console.error('Registration error:', error)\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;AAIO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpD,iBAAiB;QACjB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,cAAc;QACd,MAAM,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ;gBACA;gBACA,UAAU;YACZ;QACF;QAEA,gCAAgC;QAChC,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAEhD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,MAAM;YAAqB,SAAS;QAA4B,GAClE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}