{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient, Prisma } from '@prisma/client'\r\nimport { withAccelerate } from '@prisma/extension-accelerate'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: ReturnType<typeof createPrismaClient> | undefined\r\n}\r\n\r\nfunction createPrismaClient() {\r\n  // Determine log levels based on environment variables\r\n  let devLogs: Prisma.LogLevel[] = ['error']; // Default fallback\r\n  \r\n  if (process.env.NODE_ENV === 'development') {\r\n    if (process.env.PRISMA_LOG_LEVEL === 'verbose') {\r\n      devLogs = ['query', 'warn', 'error'];\r\n      console.log('üîç Prisma logging: VERBOSE mode (queries + warnings + errors)');\r\n    } else {\r\n      // 'basic' or any other value = no queries, just warnings and errors\r\n      devLogs = ['warn', 'error'];\r\n      console.log('üéØ Prisma logging: BASIC mode (warnings + errors only)');\r\n    }\r\n  } else {\r\n    console.log('üõ°Ô∏è Prisma logging: PRODUCTION mode (errors only)');\r\n  }\r\n\r\n  return new PrismaClient({\r\n    log: devLogs,\r\n  }).$extends(withAccelerate())\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? createPrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;;;;;;AAGA,MAAM,kBAAkB;AAIxB,SAAS;IACP,sDAAsD;IACtD,IAAI,UAA6B;QAAC;KAAQ,EAAE,mBAAmB;IAE/D,wCAA4C;QAC1C,IAAI,QAAQ,GAAG,CAAC,gBAAgB,KAAK,WAAW;YAC9C,UAAU;gBAAC;gBAAS;gBAAQ;aAAQ;YACpC,QAAQ,GAAG,CAAC;QACd,OAAO;YACL,oEAAoE;YACpE,UAAU;gBAAC;gBAAQ;aAAQ;YAC3B,QAAQ,GAAG,CAAC;QACd;IACF;;;IAIA,OAAO,IAAI,uDAAA,CAAA,eAAY,CAAC;QACtB,KAAK;IACP,GAAG,QAAQ,CAAC,CAAA,GAAA,wEAAA,CAAA,iBAAc,AAAD;AAC3B;AAEO,MAAM,SAAS,gBAAgB,MAAM,IAAI;AAEhD,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}