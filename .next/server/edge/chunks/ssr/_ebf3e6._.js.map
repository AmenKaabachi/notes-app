{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/auth-edge.ts"],"sourcesContent":["import NextAuth, { type NextAuthConfig } from 'next-auth'\r\n\r\n// Edge-compatible auth configuration without Prisma\r\nexport const authConfig: NextAuthConfig = {\r\n  providers: [],\r\n  session: {\r\n    strategy: 'jwt'\r\n  },\r\n  pages: {\r\n    signIn: '/login'\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        return {\r\n          ...token,\r\n          id: user.id\r\n        }\r\n      }\r\n      return token\r\n    },\r\n    async session({ session, token }) {\r\n      return {\r\n        ...session,\r\n        user: {\r\n          ...session.user,\r\n          id: token.id as string\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const { handlers, auth, signIn, signOut } = NextAuth(authConfig)\r\n"],"names":[],"mappings":";;;;;;;;;;;AAGO,MAAM,aAA6B;IACxC,WAAW,EAAE;IACb,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,KAAK,EAAE;gBACb;YACF;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,MAAM,EAAE;gBACd;YACF;QACF;IACF;AACF;AAEO,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAQ,AAAD,EAAE"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport { auth } from '@/lib/auth'\r\n\r\nexport default auth((req) => {\r\n  const { pathname } = req.nextUrl\r\n\r\n  // Public routes that don't require authentication\r\n  const publicRoutes = ['/login', '/register']\r\n  const isPublicRoute = publicRoutes.includes(pathname)\r\n  \r\n  // If user is authenticated and trying to access login/register, redirect to dashboard\r\n  if (req.auth && isPublicRoute) {\r\n    return NextResponse.redirect(new URL('/dashboard', req.url))\r\n  }\r\n\r\n  // If user is not authenticated and trying to access protected route, redirect to login\r\n  if (!req.auth && !isPublicRoute) {\r\n    const loginUrl = new URL('/login', req.url)\r\n    loginUrl.searchParams.set('callbackUrl', req.url)\r\n    return NextResponse.redirect(loginUrl)\r\n  }\r\n\r\n  return NextResponse.next()\r\n})\r\n\r\nexport const config = {\r\n  // Protect all routes except public ones\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except for the ones starting with:\r\n     * - api/auth (NextAuth.js routes)\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * - public folder\r\n     */\r\n    '/((?!api/auth|_next/static|_next/image|favicon.ico|public).*)',\r\n  ],\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;uCAGe,CAAA,GAAA,2GAAA,CAAA,OAAI,AAAD,EAAE,CAAC;IACnB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAEhC,kDAAkD;IAClD,MAAM,eAAe;QAAC;QAAU;KAAY;IAC5C,MAAM,gBAAgB,aAAa,QAAQ,CAAC;IAE5C,sFAAsF;IACtF,IAAI,IAAI,IAAI,IAAI,eAAe;QAC7B,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,IAAI,GAAG;IAC5D;IAEA,uFAAuF;IACvF,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe;QAC/B,MAAM,WAAW,IAAI,IAAI,UAAU,IAAI,GAAG;QAC1C,SAAS,YAAY,CAAC,GAAG,CAAC,eAAe,IAAI,GAAG;QAChD,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,wCAAwC;IACxC,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}