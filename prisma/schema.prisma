generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid()) @db.Uuid
  email      String     @unique
  name       String?
  password   String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  accounts   Account[]
  categories Category[]
  notes      Note[]
  sessions   Session[]
  tags       Tag[]

  @@index([email])
  @@map("users")
}

model Account {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refreshToken      String?  @map("refresh_token")
  accessToken       String?  @map("access_token")
  expiresAt         Int?     @map("expires_at")
  tokenType         String?  @map("token_type")
  scope             String?
  idToken           String?  @map("id_token")
  sessionState      String?  @map("session_state")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@index([providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Enhanced tracking fields
  userAgent    String?  @map("user_agent")
  ipAddress    String?  @map("ip_address")
  lastActivity DateTime @default(now()) @map("last_activity")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expires])
  @@index([lastActivity])
  @@map("sessions")
}

model Note {
  id         String    @id @default(uuid()) @db.Uuid
  title      String
  content    String
  categoryId String?   @map("category_id") @db.Uuid
  isPinned   Boolean   @default(false) @map("is_pinned")
  order      Int       @default(0)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  userId     String    @map("user_id") @db.Uuid
  noteTags   NoteTag[]
  category   Category? @relation(fields: [categoryId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@index([createdAt(sort: Desc)])
  @@index([updatedAt(sort: Desc)])
  @@index([isPinned])
  @@index([userId, isPinned])
  @@index([userId, createdAt(sort: Desc)])
  @@index([userId, updatedAt(sort: Desc)])
  @@index([userId, categoryId])
  @@map("notes")
}

model Category {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes     Note[]

  @@unique([name, userId])
  @@index([userId])
  @@index([name])
  @@index([userId, name])
  @@map("categories")
}

model Tag {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  userId    String    @map("user_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  noteTags  NoteTag[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@index([userId])
  @@index([name])
  @@index([userId, name])
  @@map("tags")
}

model NoteTag {
  id        String   @id @default(uuid()) @db.Uuid
  noteId    String   @map("note_id") @db.Uuid
  tagId     String   @map("tag_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([noteId, tagId])
  @@index([noteId])
  @@index([tagId])
  @@index([noteId, tagId])
  @@map("note_tags")
}
